patch-package
--- a/node_modules/react-scripts/config/webpack.config.dev.js
+++ b/node_modules/react-scripts/config/webpack.config.dev.js
@@ -138,6 +138,10 @@ module.exports = {
               ignore: false,
               useEslintrc: false,
               // @remove-on-eject-end
+              plugins: [
+                "react-pug",
+              ],
+              globals: ["pug"],
             },
             loader: require.resolve('eslint-loader'),
           },
@@ -174,6 +178,10 @@ module.exports = {
               // It enables caching results in ./node_modules/.cache/babel-loader/
               // directory for faster rebuilds.
               cacheDirectory: true,
+              plugins: [
+                "transform-react-pug",
+                "transform-react-jsx",
+              ],
             },
           },
           // "postcss" loader applies autoprefixer to our CSS.
@@ -213,6 +221,16 @@ module.exports = {
               },
             ],
           },
+          {
+            test: /\.scss$/,
+            use: [{
+              loader: "style-loader"
+            }, {
+              loader: "css-loader"
+            }, {
+              loader: "sass-loader",
+            }]
+          },
           // "file" loader makes sure those assets get served by WebpackDevServer.
           // When you `import` an asset, you get its (virtual) filename.
           // In production, they would get copied to the `build` folder.
--- a/node_modules/react-scripts/config/webpack.config.prod.js
+++ b/node_modules/react-scripts/config/webpack.config.prod.js
@@ -54,6 +54,10 @@ const extractTextPluginOptions = shouldUseRelativeAssetPaths
     { publicPath: Array(cssFilename.split('/').length).join('../') }
   : {};
 
+const extractSass = new ExtractTextPlugin({
+  filename: "[name].[contenthash].css",
+});
+
 // This is the production configuration.
 // It compiles slowly and is focused on producing a fast and minimal bundle.
 // The development configuration is different and lives in a separate file.
@@ -146,6 +150,10 @@ module.exports = {
               ignore: false,
               useEslintrc: false,
               // @remove-on-eject-end
+              plugins: [
+                "react-pug",
+              ],
+              globals: ["pug"],
             },
             loader: require.resolve('eslint-loader'),
           },
@@ -178,6 +186,10 @@ module.exports = {
               presets: [require.resolve('babel-preset-react-app')],
               // @remove-on-eject-end
               compact: true,
+              plugins: [
+                "transform-react-pug",
+                "transform-react-jsx",
+              ],
             },
           },
           // The notation here is somewhat confusing.
@@ -239,6 +251,18 @@ module.exports = {
             ),
             // Note: this won't work without `new ExtractTextPlugin()` in `plugins`.
           },
+          {
+            test: /\.scss$/,
+            use: extractSass.extract({
+              use: [{
+                loader: "css-loader"
+              }, {
+                loader: "sass-loader"
+              }],
+              // use style-loader in development
+              fallback: "style-loader"
+            })
+          },
           // "file" loader makes sure assets end up in the `build` folder.
           // When you `import` an asset, you get its filename.
           // This loader doesn't use a "test" so it will catch all modules
@@ -356,6 +380,7 @@ module.exports = {
     // https://github.com/jmblog/how-to-optimize-momentjs-with-webpack
     // You can remove this if you don't use Moment.js:
     new webpack.IgnorePlugin(/^\.\/locale$/, /moment$/),
+    extractSass,
   ],
   // Some libraries import Node modules but don't use them in the browser.
   // Tell Webpack to provide empty mocks for them so importing them works.
